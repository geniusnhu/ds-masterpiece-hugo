<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Analytics | Nhu Hoang</title>
    <link>/categories/analytics/</link>
      <atom:link href="/categories/analytics/index.xml" rel="self" type="application/rss+xml" />
    <description>Analytics</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2019 Nhu HoangServed by [Netlify](https://geniusnhu.netlify.app/)</copyright><lastBuildDate>Thu, 02 Apr 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/logo_hubeb4088d9e1ef3a12a3be812bce5943c_42313_300x300_fit_lanczos_2.png</url>
      <title>Analytics</title>
      <link>/categories/analytics/</link>
    </image>
    
    <item>
      <title>Useful visualization with source code</title>
      <link>/project/useful-visualization-with-source-code/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/project/useful-visualization-with-source-code/</guid>
      <description>&lt;p&gt;Useful charts created with Python code&lt;/p&gt;
&lt;h2 id=&#34;1-continuous-variable-with-categorical-variable&#34;&gt;1. Continuous variable with Categorical variable&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Bar chart&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Show trend/values among categorical variables.&lt;/p&gt;
&lt;p&gt;This serves best in case of showing the differene between various categories.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = data[[&#39;x&#39;,&#39;y&#39;]].plot(kind=&#39;bar&#39;, figsize =(8,5))
positions = (0,1, 2, 3)
ax.set_xticklabels([&amp;quot;2015&amp;quot;, &amp;quot;2016&amp;quot;, &amp;quot;2017&amp;quot;, &amp;quot;2018&amp;quot;], rotation=30)
ax.set_title(&#39;Sales and number of order&#39;)
for i in ax.patches:
    # get_x pulls left or right; get_height pushes up or down
    ax.text(i.get_x()+.01, i.get_height()+50, \
            str(round((i.get_height()), 2)), fontsize=12);
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
  &lt;img src=&#34;bar_chart.png&#34; alt=&#34;Bar chart: 2 categorical variables with continuous vales&#34; style=&#34;width:60%&#34;&gt;
  &lt;figcaption&gt;Bar chart: 2 categorical variables with continuous vales&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Subplots for multiple categorical variables&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Breaking several categories into different subplots will help generating insights, which is related to trend of each category.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.figure(figsize=(20,10))
plt.subplot(221)
data[data[&#39;type&#39;]==0].groupby(&#39;Y&#39;)[&#39;Quantity&#39;].sum().plot(color=&#39;green&#39;, linewidth=7.0)
plt.title(&#39;Item Quantity - Product class 0&#39;)
plt.xlabel(xlabel=&#39;&#39;)
plt.xticks([]) # delete the x axis tick value
plt.subplot(222)
data[data[&#39;type&#39;]==2].groupby(&#39;Y&#39;)[&#39;Quantity&#39;].sum().plot(color=&#39;red&#39;,linewidth=7.0)
plt.title(&#39;Item Quantity - Product class 2&#39;)
# Other subplot can continue with plt.subplot(223) ...
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
  &lt;img src=&#34;line_subplot.png&#34; alt=&#34;Line subplot: 2 categorical variables with continuous vales&#34; style=&#34;width:60%&#34;&gt;
  &lt;figcaption&gt;Line subplot: 2 categorical variables with continuous vales&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This can also be changed to &lt;strong&gt;Mutiple lines plot&lt;/strong&gt; as below&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.plot(data[&#39;line1&#39;], label=&#39;Line 1&#39;)
plt.plot(data[&#39;line1&#39;], color=&#39;red&#39;, label=&#39;Line 2&#39;)
plt.legend()
plt.title(&#39;2 Line plot&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
  &lt;img src=&#34;2_line_plot.png&#34; alt=&#34;Multiple Line plot&#34; style=&#34;width:60%&#34;&gt;
  &lt;figcaption&gt;Multiple Line plot&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Box plot (distribution box plot)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Talking about distribution, boxplot will initiate many insights, especially when it is used to &lt;strong&gt;detect outlier&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig_dims = (10, 8)
fig, ax = plt.subplots(figsize=fig_dims)
sns.boxplot(x=&#39;X&#39;, y=&#39;Y&#39;, data=data)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
  &lt;img src=&#34;boxplot.png&#34; alt=&#34;Box plot - Distribution vizualization&#34; style=&#34;width:60%&#34;&gt;
  &lt;figcaption&gt;Box plot - Distribution vizualization&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Polar chart&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;THe below &lt;strong&gt;Polar chart&lt;/strong&gt; used to &lt;strong&gt;detech seasonality&lt;/strong&gt; among 12 months. It is clearly seen that the data at November and December observed spike or in orderword, an annual seasonality.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import plotly.express as px
data[&#39;Month&#39;] = data[&#39;Date&#39;].dt.month_name()
fig = px.line_polar(data, theta=&amp;quot;Month&amp;quot;,r=&amp;quot;Weekly_Sales&amp;quot;,
                    color=&#39;Year&#39;,
                    line_close=True,template=&amp;quot;plotly_dark&amp;quot;)
fig.show();
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
  &lt;img src=&#34;polar_plot.png&#34; alt=&#34;Polar chart&#34; style=&#34;width:60%&#34;&gt;
  &lt;figcaption&gt;Polar chart&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;2-continuous-with-continuous-variables&#34;&gt;2. Continuous with continuous variables&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Scatter plot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One of the most popular type of plot to observe the &lt;strong&gt;relationship&lt;/strong&gt; between 2 variables and sometimes help identify the &lt;strong&gt;correlation&lt;/strong&gt; between features. &lt;code&gt;corr&lt;/code&gt; function is used to get this correlation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig_dims = (8,5)
fig, ax = plt.subplots(figsize=fig_dims)
abc = data.groupby([&#39;A&#39;,&#39;B&#39;,&#39;C&#39;]).agg({&#39;D&#39;:&#39;sum&#39;}).reset_index()
sns.scatterplot(x=&#39;C&#39;, y=&#39;A&#39;, hue=&#39;B&#39;, data=abc, palette=&amp;quot;Set2&amp;quot;).set(title = &#39;Order throughout a month&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
  &lt;img src=&#34;scatter.png&#34; alt=&#34;Scatter plot&#34; style=&#34;width:60%&#34;&gt;
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;3-percentage-plot&#34;&gt;3. Percentage plot&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Pie chart&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There is a controversy that &lt;strong&gt;pie chart&lt;/strong&gt; can hardly do a good job in representing the percentage. However, if the number of catogories are low, aka below 6, Pie chart proves no problem.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;labels = &#39;G1&#39;,&#39;G2&#39;, &#39;G3&#39;,  &#39;G4&#39;

fig1, ax1 = plt.subplots(figsize=(5,5))
ax1.pie(data.groupby(&#39;ProductClass&#39;).agg({&#39;ItemID&#39;:&#39;count&#39;}), labels=labels, autopct=&#39;%1.1f%%&#39;,
        shadow=True, startangle=90)
ax1.axis(&#39;equal&#39;)  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.title(&#39;Proportion of each Group&#39;)
plt.show();
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
  &lt;img src=&#34;pie_plot.png&#34; alt=&#34;Pie plot&#34; style=&#34;width:50%&#34;&gt;
  &lt;figcaption&gt;Pie plot&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Donut chart (Multiple categorical variables with percentage)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Donut chart&lt;/strong&gt; is the combination of 2 &lt;strong&gt;pie chart&lt;/strong&gt;, the smaller lies within the bigger. This shows the percentage within of the big group as well as the proportion within each subgroup, which provides a transparent distribution of 2 categorical variables within each other.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;subgroup_names = &#39;PC0&#39;,&#39;PC1&#39;,&#39;PC2&#39;,&#39;PC0&#39;,&#39;PC1&#39;,&#39;PC2&#39;,&#39;PC3&#39;,&#39;PC0&#39;,&#39;PC1&#39;,&#39;PC2&#39;,&#39;PC3&#39;
labels = &#39;Group 1&#39;,&#39;Group 2&#39;, &#39;Group 3&#39;

# Create colors
a, b, c=[plt.cm.Blues, plt.cm.Reds, plt.cm.Greens]
fig, ax = plt.subplots(figsize=(5,5))
ax.axis(&#39;equal&#39;)
mypie, _ = ax.pie(list(data.groupby([&#39;group&#39;]).agg({&#39;Order&#39;:&#39;nunique&#39;}).Quantity), 
                  radius=1.3, labels=labels, colors=[a(0.6), b(0.6), c(0.6)] , labeldistance=1.05)
plt.setp( mypie, width=0.3, edgecolor=&#39;white&#39;)

mypie2, _ = ax.pie(list(data.groupby([&#39;group&#39;,&#39;subgroup&#39;]).agg({&#39;Order&#39;:&#39;nunique&#39;}).Quantity), 
                   radius=1.3-0.3, labels=subgroup_names, 
                   labeldistance=0.8, colors=[a(0.5), a(0.4), a(0.3), b(0.5), b(0.4), b(0.3), b(0.2),c(0.5), 
                                              c(0.4), c(0.3),c(0.2)])
plt.setp( mypie2, width=0.4, edgecolor=&#39;white&#39;)
plt.title(&#39;Proportion of by groups and subgroups&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
  &lt;img src=&#34;donut_chart.png&#34; alt=&#34;Donut chart&#34; style=&#34;width:30%&#34;&gt;
  &lt;figcaption&gt;Donut chart&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;4-change-in-order-plot&#34;&gt;4. Change in Order plot&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Bump chart&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;How the rank changes over time&amp;rdquo; is the question that is answered by the below graph, called &lt;strong&gt;Bump chart&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&#34;bump_chart.png&#34; alt=&#34;Bump chart - Change in order&#34; style=&#34;width:60%&#34;&gt;
  &lt;figcaption&gt;Change in order&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def bumpchart(df, show_rank_axis= True, rank_axis_distance= 1.1, 
              ax= None, scatter= False, holes= False,
              line_args= {}, scatter_args= {}, hole_args= {}, number_of_lines=10):
    
    if ax is None:
        left_yaxis= plt.gca()
    else:
        left_yaxis = ax

    # Creating the right axis.
    right_yaxis = left_yaxis.twinx()
    
    axes = [left_yaxis, right_yaxis]
    
    # Creating the far right axis if show_rank_axis is True
    if show_rank_axis:
        far_right_yaxis = left_yaxis.twinx()
        axes.append(far_right_yaxis)
    
    for col in df.columns:
        y = df[col]
        x = df.index.values
        # Plotting blank points on the right axis/axes 
        # so that they line up with the left axis.
        for axis in axes[1:]:
            axis.plot(x, y, alpha= 10)

        left_yaxis.plot(x, y, **line_args, solid_capstyle=&#39;round&#39;)
        #left_yaxis.annotate(x,xy=(3,1))
        # Adding scatter plots
        if scatter:
            left_yaxis.scatter(x, y, **scatter_args)
            for x,y in zip(x,y):
              plt.annotate(col, 
                          (x,y), 
                          textcoords=&amp;quot;offset points&amp;quot;, 
                          xytext=(0,10), 
                          ha=&#39;center&#39;) 
            
            #Adding see-through holes
            if holes:
                bg_color = left_yaxis.get_facecolor()
                left_yaxis.scatter(x, y, color= bg_color, **hole_args)

    # Number of lines
     

    y_ticks = [*range(1, number_of_lines+1)]
    
    # Configuring the axes so that they line up well.
    for axis in axes:
        axis.invert_yaxis()
        axis.set_yticks(y_ticks)
        axis.set_ylim((number_of_lines + 0.5, 0.5))
    
    # Sorting the labels to match the ranks.
    left_labels = [*range(1, len(df.iloc[0].index))]
    right_labels = left_labels
    #left_labels = df.iloc[0].sort_values().index
    #right_labels = df.iloc[-1].sort_values().index
    
    left_yaxis.set_yticklabels(left_labels)
    right_yaxis.set_yticklabels(right_labels)
    
    # Setting the position of the far right axis so that it doesn&#39;t overlap with the right axis
    if show_rank_axis:
        far_right_yaxis.spines[&amp;quot;right&amp;quot;].set_position((&amp;quot;axes&amp;quot;, rank_axis_distance))
    
    return axes
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-other-customization&#34;&gt;5. Other customization&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Add x axis tick label&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data[[&#39;x&#39;,&#39;y&#39;]].plot(kind=&#39;bar&#39;,figsize =(8,5))
positions = (0,1, 2, 3)
labels = (&amp;quot;2015&amp;quot;, &amp;quot;2016&amp;quot;, &amp;quot;2017&amp;quot;, &amp;quot;2018&amp;quot;)
plt.xticks(positions, labels, rotation=0) #Assign x axis tick labels
plt.ylabel(&#39;Sales&#39;, fontsize =12)
plt.xlabel(&#39;&#39;)
plt.title(&#39;Sales by year&#39;);;
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
  &lt;img src=&#34;custom_x_axis.png&#34; alt=&#34;&#34; style=&#34;width:60%&#34;&gt;
  &lt;figcaption&gt;Custome x axis tick labels&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Set legend label&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plt.legend([&#39;Qty by day in week&#39;,&#39;# of daily orders&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;To be updated&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick deep dive at Data Scientist Skill set</title>
      <link>/2020/01/17/quick-deep-dive-at-data-scientist-skill-set/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/2020/01/17/quick-deep-dive-at-data-scientist-skill-set/</guid>
      <description>&lt;p&gt;One year ago, when I truly and seriously considered improving my skill in Data Science, two questions were always lingering in my mind:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Frankly saying, what are the skills that a Data Scientist needs?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What skill will support me in the future and How do I improve myself in the right direction at the most efficacy?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Moreover, some friends, acquaintances of mine reached out to me for a thought of what they should learn to develop their career as a Data Scientist.&lt;/p&gt;
&lt;p&gt;Actually, I can share some of my experiences with them, but as you&#39;ve already known, this field evolves unpreceedingly fast, technology and new required skills change on the yearly basis at the slowest.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;What you learn today will be the old of tomorrow!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Luckily, when I was known of the Kaggle dataset on Survey of Data Science and Machine learning, this data will definitely give me some insights for my questions.&lt;/p&gt;
&lt;p&gt;The Data source is &lt;a href=&#34;https://www.kaggle.com/c/kaggle-survey-2019&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this post, I will summary my key findings from the survey. The complete analysis can be found through this &lt;a href=&#34;https://www.kaggle.com/geninhu/direction-toward-a-great-data-scientist/data&#34;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This analysis uses R language with tidyverse package for the best insight visualization.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Before looking at the result, below are the data cleaning and preparation for the analysis.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Feature selection:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This dataset includes the written answer of the respondents if they picked &lt;code&gt;&amp;quot;Other&amp;quot;&lt;/code&gt; choice for some questions. However, the written answers are stored in another &lt;em&gt;csv&lt;/em&gt; file so that all the variables containing &lt;code&gt;&amp;quot;Other&amp;quot;&lt;/code&gt; will not a valuable variable for the analysis, therefore they will be excluded from the dataset.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For this analysis, the &lt;code&gt;&amp;quot;Duration&amp;quot;&lt;/code&gt; variable is not the factor that I want to explore so it will be excluded as well.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Other data cleaning:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Shorten some typical column names for easier understanding.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set level for values in the variables that require level later on, such as &lt;em&gt;Company size, Compensation/Salary, year of experience with machine learning&lt;/em&gt;&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Create functions for plotting (Example is as below)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plot_df_ds &amp;lt;- function (df_draw_ds, columnName1, columnName2) {
    names(df_draw_ds)[columnName1] &amp;lt;- paste(&amp;quot;value&amp;quot;)
    names(df_draw_ds)[columnName2] &amp;lt;- paste(&amp;quot;value2&amp;quot;)
    df_draw_ds &amp;lt;- df_draw_ds %&amp;gt;% 
    select (value, value2) %&amp;gt;%
    group_by(value, value2) %&amp;gt;%
    filter(value != &amp;quot;Not employed&amp;quot;,value != &amp;quot;Other&amp;quot;) %&amp;gt;% 
    summarise(count=n()) %&amp;gt;% 
    mutate(perc= prop.table(count))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Now, let&#39;s explore the result.&lt;/p&gt;
&lt;h3 id=&#34;role-and-responsibilities&#34;&gt;&lt;strong&gt;Role and Responsibilities:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;A Data scientist is responsible for many tasks but the Top 3 includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Analyzing data&lt;/strong&gt; to influence product or to support business decisions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Explore new areas of Machine learning&lt;/strong&gt; through builidng prototypes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Experiment to &lt;strong&gt;improve company existing Machine learning models&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geniusnhu/ds-masterpiece-hugo/master/content/post/2020-01-17-quick-deep-dive-at-data-scientist-skill-set/responsibility.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;programming-skills&#34;&gt;&lt;strong&gt;Programming skills:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Python, SQL and R&lt;/strong&gt; are all the programming languages that are essential for Data Scientist as they stand in the Top 3 respectively.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geniusnhu/ds-masterpiece-hugo/master/content/post/2020-01-17-quick-deep-dive-at-data-scientist-skill-set/PL.png&#34; width=&#34;300&#34; height=&#34;450&#34; &gt;&lt;/p&gt;
&lt;h3 id=&#34;machine-learning-skills&#34;&gt;&lt;strong&gt;Machine Learning skills:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;It is not a surprise if all Data Scientists use Machine Learning in their daily job but I was amazed that almost all of them use both Natural Language Processing and Computer Vision. These 2 fields has no longer been specified areas to some groups of users but expanded to much wider application and require Data Scientist to own these skills.&lt;/p&gt;
&lt;h3 id=&#34;machine-learning-algorithm-skills&#34;&gt;&lt;strong&gt;Machine Learning algorithm skills:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Regression&lt;/strong&gt; and &lt;strong&gt;Tree-based algorithms&lt;/strong&gt; are the models used by Data Scientist. With the long history in statistics and analytics, these models are still being favor in analyzing data. Another advantage of these traditional models is that they are easy to explain to business partner. Other models such as Neuron network, or Deep learning is hard to explain the result.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geniusnhu/ds-masterpiece-hugo/master/content/post/2020-01-17-quick-deep-dive-at-data-scientist-skill-set/ML.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Another interesting thing is that 51% of Data scientists is applying &lt;strong&gt;Boosting method&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;python-skills&#34;&gt;&lt;strong&gt;Python skills:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Scikit-learn, Keras, Xgboost, TensorFlow and RandomForest libraries&lt;/strong&gt; are the top used frameworks given their benefit and convenience.&lt;/p&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/geniusnhu/ds-masterpiece-hugo/master/content/post/2020-01-17-quick-deep-dive-at-data-scientist-skill-set/package.png&#34; width=&#34;300&#34; height=&#34;450&#34;&gt;
&lt;h3 id=&#34;data-scientist-credential&#34;&gt;&lt;strong&gt;Data Scientist Credential:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Foundation skills&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Writing code&lt;/strong&gt; is an important skill of a good Data scientist. Being an excellent coder is not required but preferable to have, especially big companies have the tendency to hire Data Scientist Engineer with coding skill.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is essential to &lt;strong&gt;build up your business skills&lt;/strong&gt; in addition to technical skills. Many data scientists, especially the junior may excel at machine learning and algorithm but usually cry out for business point of view. Their recommendations are getting off the track from what the company is doing. That is the worst thing you want to face in the world of Data science when no one values your idea..&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Specialized skills&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Build expertise in &lt;strong&gt;Python, SQL and/or R&lt;/strong&gt; on various online/offline platforms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fluency in using Local development environments and Intergrated development Environment, including but not limited to Jupyter, RStudio, Pycharm. Try to &lt;strong&gt;learn on job&lt;/strong&gt; or &lt;strong&gt;learn on practice&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Strong in foundation and rich in practical experience&lt;/strong&gt;. Develop side projects within your interested fields with proper models showcase. The model can be either traditional Linear regression, Decision Tree/Random Forest, or cutting-edge XGBoost, Recurrent Neural Network.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enrich your knowledge and application in convenient frameworks&lt;/strong&gt; such as Scikit-learn, Keras, Tensorflow, Xgboost. Working on your own project/cooperating project is a good choice to get practical experience if you have not obtained the chance in a company.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Computer Visio&lt;/strong&gt;n and &lt;strong&gt;NLP&lt;/strong&gt; are the booming areas in Data science so it is beneficial to prepare yourself with these skills.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Although &lt;strong&gt;AutoML&lt;/strong&gt; is a newly emerging field, it will probably become one of the important tools and skills for Data Scientist, including Automated hyperparameter tuning, Data augmentation, Feature engineering/selection and Auto ML pipelines.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Skills in working with &lt;strong&gt;Big data&lt;/strong&gt; and Big data products e.g Google Bigquerry, Databricks, Redshift are the must to own.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is the same with usage of &lt;strong&gt;cloud computing skills&lt;/strong&gt;. In big company, it is a common to work on cloud so if you do not know how to conduct machine learning on cloud, it will become your minus comparing to other candidates.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And one last important thing: &lt;strong&gt;Always believe in yourself, your choice and never give up&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;end-notes&#34;&gt;End notes&lt;/h4&gt;
&lt;p&gt;As the big survey focusing on the Data science / Machine Learning areas, it appeared as a great source for me to gain valuable information.&lt;/p&gt;
&lt;p&gt;Beside understanding which typical skills requiring to advance in the Data Science field, I want to tbuild a model to predict the salary range and I will update on that in upcoming days.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
